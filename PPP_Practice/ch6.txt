//this is where the main moto of the file is declared

//#include "std_lib_facilities.h"


/*int main()
{
    cout << "Greetings programs" << endl;
		
    //throw runtime_error("abc");
    //cin.get();
}*/

/*
int lval = 0, rval = 0;

	std::cout << "Expression(X to end):  ";
	std::cin >> lval;

	for (char op = 0; std::cin >> op;)
	{
		if(op != 'x')
		    std::cin >> rval;

		switch (op)
		{
		case '+':
			lval = lval + rval;
			break;

		case '-':
			lval = lval - rval;
			break;

		case '*':
			lval = lval * rval;
			break;

		case '/':
			lval = lval / rval;
			break;

		case '%':
			lval = lval % rval;
			break;

		case 'x': default:
			std::cout << "result: " << lval << std::endl;

			return 0;
		}
		
	}

/*
	class token
	{
	public:
		char kind;
		int value;
	};
/*
/*  token t;
	t.kind = '+';
	cout << t.kind << endl;

	token t2; 
	t2.kind = '8';
	t2.value = 3.14;

	token tt = t;
	cout << tt.kind << " " << tt.value << endl;

	t = t2;
	cout << t.value << endl;
*/


//double left = 5;
//left %= 2; //cant use double
//switch(left) //cant use double

/*
#include <iterator>

class token
{
private: 
	char type;
	double val;

public:
	token(char c) : type(c)
	{}

	token(char c, double val) : type(c), val(val)
	{}

	char getType()
	{
		return type;
	}

	int getVal()
	{
		return val;
	}
};

int main()
{
	cout << "Greetings, program!" << endl;
	
	throw runtime_error("abc");
	
	cin.get();
	auto a = 0;
	std::cout << "Expression: ";
	while (cin >> a)
	{
		


	}
	token t1('8', 5);
	token t2('+');
	token t3('8', 2);

	vector<token>tok;
	tok.push_back(t1);
	tok.push_back(t2);
	tok.push_back(t3);

	double res = 0;

	std::cout << "Size: " << tok.size() << std::endl;

	for (int i = 0; i < tok.size(); ++i)
	{
		if (tok.at(i).getType() == '+')
		{
			std::cout << tok.at(i - 1).getVal() << " + " << tok.at(i + 1).getVal() << " = ";
			res = tok.at(i - 1).getVal() + tok.at(i + 1).getVal();
		}

	}

	std::cout << res << std::endl;
	
	return 0;
	
}*/



/*
// This is example code from Chapter 6.7 "Trying the second version" of
// "Software - Principles and Practice using C++" by Bjarne Stroustrup
//


This file is known as calculator02buggy.cpp

I have inserted 5 errors that should cause this not to compile
I have inserted 3 logic errors that should cause the program to give wrong results

First try to find an remove the bugs without looking in the book.
If that gets tedious, compare the code to that in the book (or posted source code)

Happy hunting!

prob: "-" in expression() do "+", main() doesn't have {}, "case '8'" missing in get(), no "break;" in "case '*'" in term()
*/

#include "std_lib_facilities.h"

//------------------------------------------------------------------------------

class Token
{
public:
	char kind;        // what kind of token
	double value;     // for numbers: a value 

	Token(char ch)    // make a Token from a char
		:kind(ch), value(0) { }
	Token(char ch, double val)     // make a Token from a char and a double
		:kind(ch), value(val) { }
};

//------------------------------------------------------------------------------

class Token_stream 
{
public:
	Token_stream();           // make a Token_stream that reads from cin
	Token get();              // get a Token (get() is defined elsewhere)
	void putback(Token t);    // put a Token back

private:
	bool full = false;        // is there a Token in the buffer?
	Token buffer;     // here is where we keep a Token put back using putback()
};

//------------------------------------------------------------------------------

// The constructor just sets full to indicate that the buffer is empty:
Token_stream::Token_stream() : full(false), buffer(0)    // no Token in buffer
{}

//------------------------------------------------------------------------------

// The putback() member function puts its argument back into the Token_stream's buffer:
void Token_stream::putback(Token t)
{
	if (full) error("putback() into a full buffer");
	buffer = t;       // copy t to buffer
	full = true;      // buffer is now full
}

//------------------------------------------------------------------------------

Token Token_stream::get()
{
	if (full)            // do we already have a Token ready?
	{     
		full = false;   // remove token from buffer
		return buffer;
	}

	char ch = 0;
	cin >> ch;    // note that >> skips whitespace (space, newline, tab, etc.)

	switch (ch) 
	{
	case '=':    // for "print"
	case 'x':    // for "quit"
	case '(': case ')': case '+': case '-': case '*': case '/':
		return Token(ch);        // A token is created of that character. let each character represent itself
	case '.':
	case '0': case '1': case '2': case '3': case '4':
	case '5': case '6': case '7': case '8': case '9':
	{
		cin.putback(ch);         // put digit back into the input stream
		double val = 0;
		cin >> val;              // read a floating-point number. previously read char is converted into double.
		return Token('8', val);   // let '8' represent "a number"
	}
	default:
		error("Bad token");
		return NULL;
	}
}

//------------------------------------------------------------------------------

Token_stream ts;        // provides get() and putback() 

//------------------------------------------------------------------------------

double expression();    // declaration so that primary() can call expression()

//------------------------------------------------------------------------------

// deal with numbers and parentheses
double primary()
{
	Token t = ts.get();
	switch (t.kind) 
	{
	case '(':    // handle '(' expression ')'
	{
		double d = expression();
		t = ts.get();
		if (t.kind != ')') error("')' expected");
			return d;
	}
	case '8':            // we use '8' to represent a number
		return t.value;  // return the number's value
	default:
		error("primary expected");
		return NULL;
	}
}

//------------------------------------------------------------------------------

// deal with *, /, and %
double term()
{
	double left = primary();
	Token t = ts.get();        // get the next token from token stream

	while (true) 
	{
		switch (t.kind) 
		{
		case '*':
			left *= primary();
			t = ts.get();
			break;
		case '/':
		{
			double d = primary();
			if (d == 0) error("divide by zero");
			left /= d;
			t = ts.get();
			break;
		}
		default:
			ts.putback(t);     // put t back into the token stream
			return left;
		}
	}
}

//------------------------------------------------------------------------------

// deal with + and -
double expression()
{
	double left = term();      // read and evaluate a Term
	Token t = ts.get();        // get the next token from token stream

	while (true) 
	{
		switch (t.kind) 
		{
		case '+':
			left += term();    // evaluate Term and add
			t = ts.get();
			break;
		case '-':
			left -= term();    // evaluate Term and subtract
			t = ts.get();
			break;
		default:
			ts.putback(t);     // put t back into the token stream
			return left;       // finally: no more + or -: return the answer
		}
	}
}

//------------------------------------------------------------------------------

int main()
{
	try
	{
		double val = 0;
		while (cin) //always will ask for input. infinite loop.
		{
			Token t = ts.get();

			if (t.kind == 'x') break;      // 'x' for quit
			if (t.kind == '=')             // '=' for "print now"
				cout << "=" << val << '\n';
			else
				ts.putback(t);
			val = expression();
		}
		
		keep_window_open();
	}
	catch (exception& e)
	{
		cerr << "error: " << e.what() << '\n';
		keep_window_open();
		return 1;
	}
	catch (...)
	{
		cerr << "Oops: unknown exception!\n";
		keep_window_open();
		return 2;
	}

}
//------------------------------------------------------------------------------
*/